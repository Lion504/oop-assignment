package model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

/**
 * Transaction class represents a currency conversion transaction
 * This entity stores information about each currency exchange performed by users
 *
 * Example: Converting 100 EUR to SEK
 */
@Entity
@Table(name = "transactions")
public class Transaction {

    // Primary key - automatically generated by database
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "transaction_id")
    private Long transactionId;

    // The source currency (e.g., EUR)
    @ManyToOne
    @JoinColumn(name = "source_currency_id", nullable = false)
    private Currency sourceCurrency;

    // The target currency (e.g., SEK)
    @ManyToOne
    @JoinColumn(name = "target_currency_id", nullable = false)
    private Currency targetCurrency;

    // The amount in source currency (e.g., 100.0)
    @Column(name = "source_amount", nullable = false)
    private double sourceAmount;

    // The converted amount in target currency (e.g., 1170.2)
    @Column(name = "target_amount", nullable = false)
    private double targetAmount;

    // When the transaction happened
    @Column(name = "transaction_date", nullable = false)
    private LocalDateTime transactionDate;

    /**
     * Default constructor required by JPA
     */
    public Transaction() {
    }

    /**
     * Create a new transaction
     *
     * @param sourceCurrency The currency we're converting FROM
     * @param targetCurrency The currency we're converting TO
     * @param sourceAmount The amount in source currency
     * @param targetAmount The converted amount in target currency
     */
    public Transaction(Currency sourceCurrency, Currency targetCurrency,
                      double sourceAmount, double targetAmount) {
        this.sourceCurrency = sourceCurrency;
        this.targetCurrency = targetCurrency;
        this.sourceAmount = sourceAmount;
        this.targetAmount = targetAmount;
        this.transactionDate = LocalDateTime.now();
    }

    // Getters and setters

    public Long getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(Long transactionId) {
        this.transactionId = transactionId;
    }

    public Currency getSourceCurrency() {
        return sourceCurrency;
    }

    public void setSourceCurrency(Currency sourceCurrency) {
        this.sourceCurrency = sourceCurrency;
    }

    public Currency getTargetCurrency() {
        return targetCurrency;
    }

    public void setTargetCurrency(Currency targetCurrency) {
        this.targetCurrency = targetCurrency;
    }

    public double getSourceAmount() {
        return sourceAmount;
    }

    public void setSourceAmount(double sourceAmount) {
        this.sourceAmount = sourceAmount;
    }

    public double getTargetAmount() {
        return targetAmount;
    }

    public void setTargetAmount(double targetAmount) {
        this.targetAmount = targetAmount;
    }

    public LocalDateTime getTransactionDate() {
        return transactionDate;
    }

    public void setTransactionDate(LocalDateTime transactionDate) {
        this.transactionDate = transactionDate;
    }

    @Override
    public String toString() {
        return String.format("Transaction #%d: %.2f %s -> %.2f %s (at %s)",
                transactionId, sourceAmount, sourceCurrency.getCode(),
                targetAmount, targetCurrency.getCode(), transactionDate);
    }
}

